{"version":3,"sources":["../src/server.ts","../src/configs/envVars.ts","../src/configs/connectDB.ts","../src/models/category.model.ts","../src/models/Item.model.ts","../src/controllers/Item.controller.ts","../src/middlewares/validateRequest.ts","../src/schemas/item.schema.ts","../src/routes/Item.routes.ts","../src/routes/category.routes.ts","../src/controllers/category.controller.ts","../src/schemas/category.schema.ts","../src/routes/newsletter.routes.ts","../src/models/newsletter.model.ts","../src/controllers/newsletter.controller.ts","../src/schemas/newsletter.schema.ts","../src/routes/recipe.routes.ts","../src/controllers/recipe.controller.ts","../src/models/contact.model.ts","../src/controllers/contact.controller.ts","../src/schemas/contact.schema.ts","../src/routes/contact.routes.ts"],"sourcesContent":["import express from \"express\";\nimport ENV_VARS from \"./configs/envVars.ts\";\nimport cors from \"cors\";\nimport { connectToDB } from \"./configs/connectDB.ts\";\nimport itemsRoutes from \"./routes/Item.routes.ts\";\nimport categoryRoutes from \"./routes/category.routes.ts\";\nimport newsletterRoutes from \"./routes/newsletter.routes.ts\";\nimport recipeRoutes from \"./routes/recipe.routes.ts\";\nimport contactRoutes from \"./routes/contact.routes.ts\";\n\nconst app = express();\n\n\n// Middleware to parse JSON requests\napp.use(express.json());\n// Middleware to parse URL-encoded requests\napp.use(express.urlencoded({ extended: true }));\n\n// Middleware to handle CORS\napp.use(cors({\n    origin: [ENV_VARS.FRONTEND_URL, \"http://192.168.8.100:5173\"],\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allowedHeaders: [\"Content-Type\", \"Authorization\"],\n    credentials: true\n}))\n\nconnectToDB();\n\napp.use(\"/api/v1/items\", itemsRoutes);\napp.use(\"/api/v1/categories\", categoryRoutes);\napp.use(\"/api/v1/newsletter\", newsletterRoutes);\napp.use(\"/api/v1/recipe\", recipeRoutes);\napp.use(\"/api/v1/contact\", contactRoutes);\n\n\n//app.listen(ENV_VARS.PORT, () => {\n//    console.log(`Server is running on port ${ENV_VARS.PORT}`);\n//    connectToDB();\n//})\n\nexport default app;","import dotenv from \"dotenv\";\ndotenv.config();\n\n\nconst ENV_VARS = {\n    PORT: Number(process.env.PORT) || 5000,\n    FRONTEND_URL: process.env.FRONTEND_URL || \"http://localhost:5173\",\n    MONGODB_URI: process.env.MONGO_URI || \"mongodb://localhost:27017\",\n    SPOONACULAR_API_KEY: process.env.SPOONACULAR_API_KEY || \"\",\n}\n\nexport default ENV_VARS;\n","import { connect } from \"mongoose\";\nimport ENV_VARS from \"./envVars.ts\";\n\n\nexport const connectToDB = () => {\n    try {\n        connect(ENV_VARS.MONGODB_URI);\n        console.log(\"Connected to MongoDB database successfully at:\", ENV_VARS.MONGODB_URI);\n    } catch(err) {\n        console.error(\"Error connecting to the database:\", err);\n    }\n}","import type { ICategory } from \"@/types/category.types.ts\";\nimport { model, Schema } from \"mongoose\";\n\nconst categorySchema = new Schema<ICategory>({\n    name: {\n        type: String,\n        required: true,\n        trim: true,\n        unique: true,\n        lowercase: true\n    },\n    menuId: {\n        type: Number,\n        required: true\n    }\n}, { timestamps: true });\n\n\nexport const Category = model(\"Category\", categorySchema);","import type { IComment, IIngredient, IItem, IMore } from \"@/types/item.types.ts\";\nimport { Schema, model } from \"mongoose\";\n\n\nconst InstructionSchema = new Schema({\n    stepTitle: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    stepDescription: {\n        type: String,\n        required: true,\n        trim: true\n    }\n}, { _id: false });\n\n\nconst IngredientSchema = new Schema<IIngredient>({\n    name: {\n        type: String,\n        required: true,\n    },\n    quantity: {\n        type: String,\n        required: true,\n    }\n}, { _id: false })\n\nconst CommentSchema = new Schema<IComment>({\n    user: {\n        type: String,\n        required: true\n    },\n    comment: {\n        type: String,\n        required: true\n    }\n}, { _id: false });\n\n\nconst MoreSchema = new Schema<IMore>({\n    prep_time: {\n        type: String,\n        required: true\n    },\n    cook_time: {\n        type: String,\n        required: true\n    },\n    servings: {\n        type: String,\n        required: true\n    },\n    difficulty: {\n        type: String,\n        enum: [\"easy\", \"medium\", \"hard\"],\n        required: true\n    },\n    source: {\n        type: String,\n        required: true\n    }\n}, { _id: false });\n\n\nconst DEFAULT_DESCRIPTION = \"A delightful dish crafted with care, combining fresh ingredients and easy-to-follow steps for a satisfying meal experience.\";\n\nconst ItemSchema = new Schema<IItem>({\n    menuId: {\n        type: Number,\n        required: true\n    },\n    name: {\n        type: String,\n        required: true,\n        trim: true,\n        unique: true,\n        lowercase: true\n    },\n    thumbnail_image: {\n        type: String,\n        required: true\n    },\n    category: {\n        type: Schema.Types.ObjectId,\n        ref: \"Category\",\n        required: true\n    },\n    description: {\n        type: String,\n        trim: true,\n        default: DEFAULT_DESCRIPTION\n    },\n    instructions: {\n        type: [InstructionSchema],\n        required: true\n    },\n    tags: {\n        type: [String],\n        default: []\n    },\n    ingredients: {\n        type: [IngredientSchema],\n        required: true\n    },\n    comments: {\n        type: [CommentSchema],\n        default: []\n    },\n    more: {\n        type: MoreSchema,\n        required: true\n    }\n\n}, { timestamps: true });\n\n\nexport const Item = model(\"Item\", ItemSchema);\n","import { Category } from \"@/models/category.model.ts\";\nimport { Item } from \"@/models/Item.model.ts\";\nimport { CreateItemInput } from \"@/schemas/item.schema.ts\";\nimport type { Request, Response } from \"express-serve-static-core\";\n\nexport const getAllItems = async (\n    req: Request<{}, {}, {}, { limit?: number; page?: number }>,\n    res: Response\n) => {\n    const limit = Number(req.query.limit) || 10;\n    const page = Number(req.query.page) || 1;\n    const skip = (page - 1) * limit;\n\n    try {\n        const items = await Item.find({})\n            .populate(\"category\", \"name\")\n            .select(\"name thumbnail_image category more.difficulty more.prep_time\")\n            .sort({ createdAt: -1 })\n            .skip(skip)\n            .limit(limit)\n            .lean();\n\n        const total = await Item.countDocuments();\n        const totalPages = Math.ceil(total / limit);\n        const nextPage = page < totalPages ? page + 1 : null;\n\n        res.status(200).json({\n            success: true,\n            message: \"Items fetched successfully\",\n            data: items,\n            pagination: {\n                total,\n                page,\n                limit,\n                totalPages,\n                nextPage\n            },\n        });\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to fecth items\"\n        });\n    }\n}\n\n\nexport const getItemById = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n        const item = await Item.findById(id)\n            .populate(\"category\", \"name\")\n            .lean();\n\n        if (!item) {\n            res.status(404).json({\n                success: false,\n                message: \"Item not found\"\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Item fetched successfully\",\n            data: item\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const getSearchItems = async (req: Request<{}, {}, {}, { q?: string }>, res: Response) => {\n    const { q } = req.query;\n\n    if (!q) {\n        res.status(400).json({\n            success: false,\n            message: \"Search query is required\"\n        });\n        return;\n    }\n\n    try {\n        const items = await Item.find({ name: { $regex: q, $options: \"i\" } })\n            .populate(\"category\", \"name\")\n            .select(\"name thumbnail_image category more.difficulty more.prep_time\")\n            .sort({ createdAt: -1 })\n            .lean();\n\n        res.status(200).json({\n            success: true,\n            message: items.length ? \"Items fetched successfully\" : \"No items found!\",\n            data: items\n        });\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const getItemsByCategory = async (req: Request<{ category: string }>, res: Response) => {\n    const { category } = req.params;\n\n    try {\n\n        const foundCategory = await Category.findOne({ name: category.toLowerCase() }).lean()\n\n        if (!foundCategory) {\n            res.status(404).json({\n                success: false,\n                message: \"Category with this name doesn't exist!\"\n            })\n            return;\n        }\n\n        const itemsByCategory = await Item.find({ category: foundCategory._id })\n            .populate(\"category\", \"name\")\n            .select(\"name thumbnail_image category more.difficulty more.prep_time\")\n            .lean()\n\n\n        res.status(200).json({\n            success: true,\n            message: `Items of category \"${foundCategory.name}\" fetched successfully`,\n            data: itemsByCategory\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\nexport const createItem = async (req: Request<{}, {}, CreateItemInput>, res: Response) => {\n    try {\n\n        const foundItem = await Item.findOne({ name: req.body.name });\n\n        if (foundItem) {\n            res.status(400).json({\n                success: false,\n                message: \"Item with this name already exists!\",\n            })\n            return;\n        }\n\n        const createdItem = await Item.create(req.body);\n\n        res.status(201).json({\n            success: true,\n            message: \"Item created successfully.\",\n            data: createdItem\n        });\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const updateItem = async (req: Request<{ id: string }>, res: Response) => {\n    try {\n\n        // TODO: add update item logic \n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const deleteItem = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n\n        const deletedItem = await Item.findByIdAndDelete(id).lean();\n\n        if (!deletedItem) {\n            res.status(404).json({\n                success: false,\n                message: \"Item not found\",\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Item deleted successfully\",\n            data: deletedItem\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n","import type { Request, Response, NextFunction } from \"express-serve-static-core\";\nimport { ZodError, ZodSchema } from \"zod\";\n\ntype ValidateOptions = {\n    body?: ZodSchema,\n    params?: ZodSchema,\n    query?: ZodSchema\n}\n\n\nexport const validateRequest = (schemas: ValidateOptions) => {\n    return (req: Request, res: Response, next: NextFunction) => {\n        try {\n\n            if (schemas.body) {\n                req.body = schemas.body.parse(req.body);\n            }\n\n            if (schemas.query) {\n                req.query = schemas.query.parse(req.query);\n            }\n\n            if (schemas.params) {\n                req.params = schemas.params.parse(req.params);\n            }\n\n            next()\n        } catch (error) {\n            if (error instanceof ZodError) {\n                res.status(400).json({\n                    message: \"Validation Error\",\n                    errors: error.errors.map(err => ({\n                        field: err.path.join(\".\"),\n                        err: err.message\n                    }))\n                })\n                return;\n            }\n            next(error);\n        }\n    }\n}\n\n","import { z } from \"zod\";\n\n\nexport const instructionSchema = z.object({\n    stepTitle: z.string()\n        .trim()\n        .min(1, \"Step title is required\")\n        .max(100, \"Step title is too long\"),\n    stepDescription: z.string()\n        .trim()\n        .min(1, \"Step description is required\")\n        .max(1000, \"Step description is too long\"),\n});\n\n\nexport const ingredientSchema = z.object({\n    name: z.string()\n        .min(1, \"Ingredient name is required\"),\n    quantity: z.string()\n        .min(1, \"Ingredient quantity is required\"),\n})\n\n\nexport const commentSchema = z.object({\n    user: z.string()\n        .trim()\n        .min(1, \"User name is required\"),\n    comment: z.string()\n        .trim()\n        .min(1, \"Comment is required\"),\n})\n\nexport const moreSchema = z.object({\n    prep_time: z.string()\n        .trim()\n        .min(1, \"Preparation time is required\"),\n    cook_time: z.string()\n        .trim()\n        .min(1, \"Cooking time is required\"),\n    servings: z.string()\n        .trim()\n        .min(1, \"Services info is required\"),\n    difficulty: z.enum([\"easy\", \"medium\", \"hard\"], {\n        required_error: \"Difficulty is required\"\n    }),\n    source: z.string()\n        .trim()\n        .min(1, \"Source is required\")\n})\n\n\nexport const createItemSchema = z.object({\n    menuId: z.number()\n        .int()\n        .positive(\"Menu ID must be a positive integer\"),\n    name: z.string()\n        .trim()\n        .min(1, \"Name is required\")\n        .toLowerCase(),\n    thumbnail_image: z.string()\n        .url(\"Thumbnail must be a valid URL\"),\n    category: z.string()\n        .min(1, \"Category is required\"),\n    description: z.string()\n        .min(30, \"Description must be at least 30 characters\")\n        .max(300, \"Description must be at most 300 characters\")\n        .optional(),\n    instructions: z.array(instructionSchema)\n        .min(1, \"At least one instruction is required\"),\n    tags: z.array(z.string()).optional(),\n    ingredients: z.array(ingredientSchema, { required_error: \"ingredient field is required\" })\n        .min(1, \"At least one ingredient is required\"),\n    comments: z.array(commentSchema)\n        .optional(),\n    more: moreSchema\n});\n\n\nexport type CreateItemInput = z.infer<typeof createItemSchema>;\nexport type IngredientInput = z.infer<typeof ingredientSchema>;\nexport type CommentInput = z.infer<typeof commentSchema>;\nexport type MoreInput = z.infer<typeof moreSchema>;\n","import * as ItemsController from \"@/controllers/Item.controller.ts\";\nimport { validateRequest } from \"@/middlewares/validateRequest.ts\";\nimport { createItemSchema } from \"@/schemas/item.schema.ts\";\nimport { Router } from \"express\";\n\nconst router = Router();\n\n// List & search routes\nrouter.get(\"/\", ItemsController.getAllItems);\nrouter.get(\"/search\", ItemsController.getSearchItems);\n\n// Category-related route\nrouter.get(\"/category/:category\", ItemsController.getItemsByCategory);\n\n// Specific item by id (dynamic)\nrouter.get(\"/:id\", ItemsController.getItemById);\n\n// CRUD operations\nrouter.post(\"/\", validateRequest({ body: createItemSchema }), ItemsController.createItem);\nrouter.put(\"/:id\", ItemsController.updateItem);\nrouter.delete(\"/:id\", ItemsController.deleteItem);\n\n\nexport default router;","import { Router } from \"express\";\nimport * as CategoryController from \"@/controllers/category.controller.ts\";\nimport { validateRequest } from \"@/middlewares/validateRequest.ts\";\nimport { createCategorySchema, updateCategorySchema } from \"@/schemas/category.schema.ts\";\n\n\nconst router = Router();\n\nrouter.get(\"/\", CategoryController.getAllCategories);\n\nrouter.get(\"/:id\", CategoryController.getCategoryById);\n\nrouter.post(\"/\", validateRequest({ body: createCategorySchema }), CategoryController.createCategory);\n\nrouter.patch(\"/:id\", validateRequest({ body: updateCategorySchema }), CategoryController.updateCategory);\n\nrouter.delete(\"/:id\", CategoryController.deleteCategory);\n\n\n\nexport default router;","import { Category } from \"@/models/category.model.ts\";\nimport { CreateCategoryInput, UpdateCategoryInput } from \"@/schemas/category.schema.ts\";\nimport type { Request, Response } from \"express-serve-static-core\";\n\n\n\nexport const getAllCategories = async (req: Request, res: Response) => {\n    try {\n        const categories = await Category.find().lean();\n\n        res.status(200).json({\n            success: true,\n            message: \"Categories fetched successfully.\",\n            data: categories\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const getCategoryById = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n        const category = await Category.findById(id).lean();\n\n        if (!category) {\n            res.status(404).json({\n                success: false,\n                message: \"Category with this ID was not found!\",\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Category fetched successfully.\",\n            data: category\n        })\n\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\n\nexport const createCategory = async (req: Request<{}, {}, CreateCategoryInput>, res: Response) => {\n    const { name, menuId } = req.body;\n\n    try {\n\n        const doesCategoryExist = await Category.findOne({ name }).lean()\n\n        if (doesCategoryExist) {\n            res.status(400).json({\n                success: false,\n                message: \"Category with this name already exists.\",\n            });\n            return;\n        }\n\n        const createdCategory = await Category.create({ name, menuId });\n\n        res.status(201).json({\n            success: true,\n            message: \"Category created successfully!\",\n            data: createdCategory\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const updateCategory = async (req: Request<{ id: string }, {}, UpdateCategoryInput>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n\n        const updatedCategory = await Category.findByIdAndUpdate(id, req.body, { new: true });\n\n        if (!updatedCategory) {\n            res.status(404).json({\n                success: false,\n                message: \"Category with this ID was not found!\",\n            });\n            return;\n        }\n\n\n        res.status(200).json({\n            success: true,\n            message: \"Category updated successfully\",\n            data: updatedCategory,\n        });\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}\n\n\nexport const deleteCategory = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n        const deletedCategory = await Category.findByIdAndDelete(id).lean();\n\n        if (!deletedCategory) {\n            res.status(404).json({\n                success: false,\n                message: \"Category with this ID was not found!\",\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Category deleted successfully\",\n            data: deletedCategory\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        });\n    }\n}\n\n\n","import { z } from \"zod\";\n\n\nexport const createCategorySchema = z.object({\n    name: z.string()\n        .trim()\n        .toLowerCase()\n        .min(1, \"Category name is required\"),\n    menuId: z.number()\n        .int()\n        .positive(\"menuId must be a positive integer\")\n})\n\n\nexport const updateCategorySchema = createCategorySchema.partial();\n\n\nexport type CreateCategoryInput = z.infer<typeof createCategorySchema>;\n\nexport type UpdateCategoryInput = z.infer<typeof updateCategorySchema>;\n","import { Router } from \"express\";\nimport { subscribeToNewsletter } from \"@/controllers/newsletter.controller.ts\";\nimport { validateRequest } from \"@/middlewares/validateRequest.ts\";\nimport { newsletterSubscriptionSchema } from \"@/schemas/newsletter.schema.ts\";\n\nconst router = Router();\n\n\nrouter.post(\"/subscribe\", validateRequest({ body: newsletterSubscriptionSchema }), subscribeToNewsletter);\n\n\nexport default router;","import { model, Schema } from \"mongoose\";\n\n\nexport interface INewsletterSubscription extends Document {\n    name?: string;\n    email: string;\n    subscribedAt: Date\n}\n\nconst newsletterSchema = new Schema<INewsletterSubscription>({\n    name: {\n        type: String,\n        trim: true,\n        minlength: 2,\n        maxlength: 50\n    },\n    email: {\n        type: String,\n        required: true,\n        unique: true,\n        trim: true,\n        lowercase: true\n    },\n    subscribedAt: {\n        type: Date,\n        default: Date.now\n    }\n}, { timestamps: true })\n\n\nexport const NewsletterSubscription = model(\"NewsletterSubscription\", newsletterSchema);\n","import { NewsletterSubscription } from \"@/models/newsletter.model.ts\";\nimport type { Request, Response } from \"express-serve-static-core\";\n\n\nexport const subscribeToNewsletter = async (req: Request<{}, {}, { name: string, email: string }>, res: Response) => {\n    const { name, email } = req.body;\n\n    try {\n\n        const existingSubscription = await NewsletterSubscription.findOne({ email });\n\n        if (existingSubscription) {\n            res.status(400).json({\n                success: false,\n                message: \"You are already subscribed to the newsletter.\"\n            })\n            return;\n        }\n\n        const subscription = await NewsletterSubscription.create({ name, email });\n\n        res.status(201).json({\n            success: true,\n            message: \"Successfully subscribed to the newsletter.\",\n            data: subscription\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Unknown error\"\n        })\n    }\n}","import { z } from \"zod\";\n\n\nexport const newsletterSubscriptionSchema = z.object({\n    name: z.string()\n        .trim()\n        .min(2, \"Name is too short\")\n        .max(50, \"Name is too long\")\n        .optional(),\n    email: z.string({ required_error: \"Email is required\" })\n        .email(\"Invalid email format\")\n        .trim()\n        .toLowerCase()\n}).strict()\n\nexport type NewsletterInput = z.infer<typeof newsletterSubscriptionSchema>;\n","import { Router } from \"express\";\nimport { fetchRecipeBlogs } from \"../controllers/recipe.controller.ts\";\n\nconst router = Router();\n\nrouter.get(\"/blogs\", fetchRecipeBlogs);\n\nexport default router;","import ENV_VARS from \"@/configs/envVars.ts\";\nimport axios from \"axios\";\nimport type { Request, Response } from \"express-serve-static-core\";\n\ninterface RecipeBlog {\n    id: number;\n    title: string;\n    image: string;\n    summary: string;\n    readyInMinutes: number;\n    servings: number;\n    sourceUrl: string;\n}\n\n\nexport const fetchRecipeBlogs = async (req: Request<{}, {}, {}, { number?: number }>, res: Response) => {\n    const { number = 6 } = req.query;\n    try {\n        const { data } = await axios.get(`https://api.spoonacular.com/recipes/random`, {\n            params: {\n                number,\n                apiKey: ENV_VARS.SPOONACULAR_API_KEY\n            }\n        })\n\n        // Extract only needed data from each recipe\n        const filteredBlogs: RecipeBlog[] = data.recipes.map((recipe: any) => ({\n            id: recipe.id,\n            title: recipe.title,\n            image: recipe.image,\n            summary: recipe.summary,\n            readyInMinutes: recipe.readyInMinutes,\n            servings: recipe.servings,\n            sourceUrl: recipe.sourceUrl\n        }))\n\n        res.status(200).json({\n            success: true,\n            message: \"Fetched recipe blogs successfully\",\n            data: filteredBlogs\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to fetch blogs\"\n        })\n    }\n}","import type { IContactMessage } from \"@/types/contact.types.ts\";\nimport { model, Schema } from \"mongoose\";\n\nconst ContactMessageSchema = new Schema<IContactMessage>({\n    firstName: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    lastName: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    email: {\n        type: String,\n        required: true,\n        trim: true\n    },\n    message: {\n        type: String,\n        required: true,\n        trim: true\n    }\n});\n\nexport const ContactMessage = model(\"ContactMessage\", ContactMessageSchema);","import { ContactMessage } from \"@/models/contact.model.ts\";\nimport { ContactMessageInput } from \"@/schemas/contact.schema.ts\";\nimport type { Request, Response } from \"express-serve-static-core\";\n\n\nexport const getPaginatedContactMessages = async (req: Request<{}, {}, {}, { page?: number, limit?: number }>, res: Response) => {\n    const page = Number(req.query.page) || 1;\n    const limit = Number(req.query.limit) || 10;\n    const skip = (page - 1) * limit;\n\n    try {\n        const contactMessages = await ContactMessage.find({})\n            .sort({ createdAt: -1 })\n            .skip(skip)\n            .limit(limit)\n            .lean()\n\n        const total = await ContactMessage.countDocuments();\n\n        res.status(200).json({\n            success: true,\n            message: \"Contact messages retrieved successfully\",\n            data: contactMessages,\n            pagination: {\n                total,\n                page,\n                limit,\n                totalPages: Math.ceil(total / limit)\n            }\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to retrieve contact messages\"\n        })\n    }\n}\n\n\nexport const getContactMessageById = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n        const contact = await ContactMessage.findById(id);\n\n        if (!contact) {\n            res.status(404).json({\n                success: false,\n                message: \"Contact message not found\"\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Contact message retrieved successfully\",\n            data: contact\n\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to retrieve contact messages\"\n        })\n    }\n}\n\n\nexport const createContactMessage = async (req: Request<{}, {}, ContactMessageInput>, res: Response) => {\n    try {\n\n        const contact = await ContactMessage.create(req.body);\n\n        res.status(201).json({\n            success: true,\n            message: 'Message received successfully',\n            data: contact\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to create contact message\"\n        })\n    }\n}\n\n\nexport const deleteContactMessage = async (req: Request<{ id: string }>, res: Response) => {\n    const { id } = req.params;\n\n    try {\n        const deletedContactMessage = await ContactMessage.findByIdAndDelete(id);\n        if (!deletedContactMessage) {\n            res.status(404).json({\n                success: false,\n                message: \"Contact message not found\"\n            })\n            return;\n        }\n\n        res.status(200).json({\n            success: true,\n            message: \"Contact message deleted successfully\",\n            data: deletedContactMessage\n        })\n\n    } catch (err) {\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n            error: err instanceof Error ? err.message : \"Failed to delete contact message\"\n        })\n    }\n}","import { z } from \"zod\";\n\n\nexport const contactMessageSchema = z.object({\n    firstName: z.string({\n        required_error: \"First name is required\",\n        invalid_type_error: \"First name must be a string\"\n    })\n        .trim()\n        .min(3, \"First name must be at least 3 characters\")\n        .max(25, \"First name must be less than 25 characters\")\n        .toLowerCase(),\n    lastName: z.string({\n        required_error: \"Last name is required\",\n        invalid_type_error: \"Last name must be a string\"\n    })\n        .trim()\n        .min(3, \"Last name must be at least 3 characters\")\n        .max(25, \"Last name must be less than 25 characters\")\n        .toLowerCase(),\n    email: z.string({\n        required_error: \"Email is required\",\n        invalid_type_error: \"Email must be a string\"\n    })\n        .trim()\n        .email(\"Invalid email format\")\n        .toLowerCase(),\n    message: z.string({\n        required_error: \"Message is required\",\n        invalid_type_error: \"Message must be a string\"\n    })\n        .trim()\n        .min(10, \"Message must be at least 10 characters\")\n        .max(500, \"Message must be less than 500 characters\")\n})\n\nexport type ContactMessageInput = z.infer<typeof contactMessageSchema>;\n","import * as ContactMessageController from \"@/controllers/contact.controller.ts\";\nimport { validateRequest } from \"@/middlewares/validateRequest.ts\";\nimport { contactMessageSchema } from \"@/schemas/contact.schema.ts\";\nimport { Router } from \"express\";\n\nconst router = Router();\n\nrouter.get(\"/\", ContactMessageController.getPaginatedContactMessages);\n\nrouter.get(\"/:id\", ContactMessageController.getContactMessageById);\n\nrouter.post(\"/\", validateRequest({ body: contactMessageSchema }), ContactMessageController.createContactMessage);\n\nrouter.delete(\"/:id\", ContactMessageController.deleteContactMessage)\n\n\nexport default router;"],"mappings":"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","names":["import_express","dotenv","import_mongoose","import_mongoose","import_zod","import_express","import_zod","router","import_express","import_mongoose","import_zod","router","import_express","axios","router","import_mongoose","import_zod","import_express","router","express","cors"]}